{
    "rules": {
        ".read": false,
        ".write": false,

        // List of user's usernames
        "usernames": {
            ".read": true,
            ".write": false,
            "$username": {
                ".write": "auth.uid === newData.child('uid').val()",
                ".validate": "newData.hasChildren(['uid', 'createdAt']) && $username.matches(/^[a-zA-Z0-9_]{1,15}$/)",
                "uid": {
                    ".validate": "newData.isString() && auth.uid === newData.val()"
                },
                "createdAt": {
                    ".validate": "newData.isNumber() && newData.val() <= now && !data.exists()"
                },
                "disabledAt": {
                    ".validate": "newData.isNumber() && newData.val() <= now"
                },
                "$other": {
                    ".validate": false
                }
            }
        },

        // List of user's public data
        "users": {
            ".read": true,
            ".write": false,
            ".indexOn": ["username"],
            "$user_id": {
                ".write": "auth.uid === $user_id",
                ".validate": "newData.hasChildren(['createdAt', 'username', 'displayname'])",
                "createdAt": {
                    ".validate": "newData.isNumber() && newData.val() <= now && !data.exists()"
                },
                "username": {
                    ".validate": "newData.isString() && root.child('usernames').hasChild(newData.val())"
                },
                "displayname": {
                    ".validate": "newData.isString() && newData.val().matches(/^.{1,30}$/)"
                },
                "organization": {
                    ".validate": "newData.isString() && newData.val().length <= 30"
                },
                "wcaId": {
                    ".validate": "newData.isString() && newData.val().matches(/^[0-9]{4}[A-Z]{4}[0-9]{2}$/)"
                },
                "twitterId": {
                    ".validate": "newData.isString() && newData.val().matches(/^[a-zA-Z0-9_]{1,15}$/)"
                },
                "bio": {
                    ".validate": "newData.isString() && newData.val().length <= 200"
                },
                "isTriboxTeam": {
                    ".validate": "newData.isBoolean()"
                },
                "isTriboxCustomer": {
                    ".validate": "newData.isBoolean()"
                },
                "isSuspended": {
                    ".validate": "newData.isBoolean()"
                },
                "isDeleted": {
                    ".validate": "newData.isBoolean()"
                },
                "lastUsedPuzzles": {
                    "$event_id": {
                        ".validate": "root.child('events').hasChild($event_id) && newData.hasChildren(['type'])",
                        "type": {
                            ".validate": "newData.isString() && (newData.val() == 'database' || newData.val() == 'nodatabase' || newData.val() == 'unknown')"
                        },
                        "brand": {
                            ".validate": "newData.isNumber() && 0 < newData.val()"
                        },
                        "product": {
                            ".validate": "newData.isNumber() && 0 < newData.val()"
                        },
                        "input": {
                            ".validate": "newData.isString() && newData.val().length <= 50"
                        },
                        "$other": {
                            ".validate": false
                        }
                    }
                },
                "$other": {
                    ".validate": false
                }
            }
        },

        // List of user's private data
        "usersecrets": {
            ".read": false,
            ".write": false,
            "$user_id": {
                ".read": "auth.uid === $user_id",
                ".write": "auth.uid === $user_id",
                ".validate": "newData.hasChildren(['loggedinAt'])",
                "loggedinAt": {
                    ".validate": "newData.isNumber() && newData.val() <= now"
                },
                "emailChangedAt": {
                    ".validate": "newData.isNumber() && newData.val() <= now"
                },
                "passwordChangedAt": {
                    ".validate": "newData.isNumber() && newData.val() <= now"
                },
                "usernameChangedAt": {
                    ".validate": "newData.isNumber() && newData.val() <= now"
                },
                "triboxStoreCustomerId": {
                    ".validate": "newData.isNumber() && 0 < newData.val() && root.child('users').child($user_id).child('isTriboxCustomer').val() === true"
                },
                "triboxStickersCustomerId": {
                    ".validate": "newData.isNumber() && 0 < newData.val() && root.child('users').child($user_id).child('isTriboxCustomer').val() === true"
                },
                "prefJudgecall": {
                    ".validate": "newData.isBoolean()"
                },
                "isAdmin": {
                    ".validate": "newData.isBoolean()"
                },
                "adminToken": {
                    ".validate": "newData.isString() && newData.val().length <= 100"
                },
                "$other": {
                    ".validate": false
                }
            }
        },

        // List of user's competed history
        "userhistories": {
            ".read": false,
            ".write": false,
            "$user_id": {
                ".read": true,
                ".write": "auth.uid === $user_id",
                "$contest_id": {
                    ".validate": "root.child('contests').hasChild($contest_id)",
                    "$event_id": {
                        ".validate": "root.child('events').hasChild($event_id)",
                        "hasCompeted": {
                            ".validate": "newData.isBoolean()"
                        },
                        "$other": {
                            ".validate": false
                        }
                    }
                }
            }
        },

        // Pointer to the contest in progress
        "inProgress": {
            ".read": true,
            ".write": false,
            ".validate": "newData.hasChildren(['contest'])",
            "contest": {
                ".validate": "newData.isString() && newData.val().matches(/^c[0-9]{4}(1|2)[0-1]{2}$/)"
            },
            "$other": {
                ".validate": false
            }
        },

        // Database of events
        "events": {
            ".read": true,
            ".write": false,
            "$event_id": {
                ".validate": "newData.hasChildren(['name', 'method', 'attempts', 'format', 'hasInspection'])",
                "name": {
                    ".validate": "newData.isString() && newData.val().length < 64"
                },
                "method": {
                    ".validate": "newData.isString() && newData.val().matches(/^(average|mean|best)$/)"
                },
                "attempts": {
                    ".validate": "newData.isNumber() && 1 <= newData.val() && newData.val() <= 5"
                },
                "format": {
                    ".validate": "newData.isString() && newData.val().matches(/^(time|number|multi)$/)"
                },
                "hasInspection": {
                    ".validate": "newData.isBoolean()"
                },
                "$other": {
                    ".validate": false
                }
            }
        },

        // Data for contests
        "contests": {
            ".read": true,
            ".write": false,
            "$contest_id": {
                ".validate": "$contest_id.matches(/^c[0-9]{4}(1|2)[0-9]{2}$/) && newData.hasChildren(['contestName', 'year', 'season', 'number', 'beginAt', 'endAt', 'events', 'scrambles'])",
                "contestId": {
                    ".validate": "newData.isNumber()"
                },
                "contestName": {
                    ".validate": "newData.isString() && newData.val().matches(/^.{1,63}$/)"
                },
                "year": {
                    ".validate": "newData.isNumber() && 0 < newData.val()"
                },
                "season": {
                    ".validate": "newData.isNumber() && 1 <= newData.val() && newData.val() <= 2"
                },
                "number": {
                    ".validate": "newData.isNumber() && 1 <= newData.val() && newData.val() <= 27"
                },
                "beginAt": {
                    ".validate": "newData.isNumber() && 0 <= newData.val() && newData.val() < newData.parent().child('endAt').val()"
                },
                "endAt": {
                    ".validate": "newData.isNumber() && 0 <= newData.val() && newData.parent().child('beginAt').val() < newData.val()"
                },
                "events": {
                    "$event_seq": {
                        ".validate": "root.child('events').hasChild(newData.val())"
                    }
                },
                "scrambles": {
                    "$event_id": {
                        ".validate": "root.child('events').hasChild($event_id)",
                        "$scramble_seq": {
                            ".validate": "newData.isString() && newData.val().matches(/^.{1,255}$/)"
                        }
                    }
                },
                // ビデオボーナス節
                "videoBonusStatus": {
                    ".validate": "newData.isString() && (newData.val() == 'checking' || newData.val() == 'done')"
                },
                // 結果ページの公開ステータス
                "resultsStatus": {
                    ".validate": "newData.isString() && (newData.val() == 'public' || newData.val() == 'review')"
                },
                "$other": {
                    ".validate": false
                }
            }
        },

        // Data for scrambles
        "scrambles": {
            ".read": false,
            ".write": false,
            "$contest_id": {
                ".read": "root.child('contests').child($contest_id).child('beginAt').val() <= now",
                ".validate": "root.child('contests').hasChild($contest_id)",
                "$event_id": {
                    ".validate": "root.child('events').hasChild($event_id)",
                    "$scramble_seq": {
                        ".validate": "newData.isString() && newData.val().matches(/^.{1,1023}$/)"
                    }
                }
            }
        },

        // Data for scrambles images
        "scramblesimg": {
            ".read": false,
            ".write": false,
            "$contest_id": {
                ".read": "root.child('contests').child($contest_id).child('beginAt').val() <= now",
                ".validate": "root.child('contests').hasChild($contest_id)",
                "$event_id": {
                    ".validate": "root.child('events').hasChild($event_id)",
                    "$scramble_seq": {
                        ".validate": "newData.isString() && newData.val().matches(/^.{1,1023}$/)"
                    }
                }
            }
        },

        // Data for contest results
        "results": {
            ".read": false,
            ".write": false,
            "$contest_id": {
                ".read": "root.child('contests').child($contest_id).child('endAt').val() < now",
                ".validate": "root.child('contests').hasChild($contest_id)",
                "$event_id": {
                    ".validate": "root.child('events').hasChild($event_id)",
                    "$user_id": {
                        ".read": "auth.uid === $user_id || root.child('contests').child($contest_id).child('endAt').val() < now",
                        ".write": "auth.uid === $user_id && root.child('contests').child($contest_id).child('beginAt').val() <= now && now <= root.child('contests').child($contest_id).child('endAt').val()",
                        ".validate": "root.child('users').hasChild($user_id) && newData.hasChildren(['beginAt'])",
                        "beginAt": {
                            ".validate": "newData.isNumber() && 0 <= newData.val()"
                        },
                        "endAt": {
                            ".validate": "newData.isNumber() && newData.parent().child('beginAt').val() <= newData.val()"
                        },
                        "type": {
                            ".validate": "newData.isString() && (newData.val() == 'timer' || newData.val() == 'form' || newData.val() == 'solution')"
                        },
                        "details": {
                            "$details_seq": {
                                ".validate": "newData.hasChildren(['record', 'condition'])",
                                "record": {
                                    ".validate": "newData.isNumber() && 0 <= newData.val() && newData.val() < 10000"
                                },
                                "condition": {
                                    ".validate": "newData.isString() && (newData.val() == 'OK' || newData.val() == '+2' || newData.val() == 'DNF')"
                                },
                                "solution": {
                                    ".validate": "newData.isString() && newData.val().matches(/^.{1,500}$/)"
                                },
                                "note": {
                                    ".validate": "newData.isString() && newData.val().length <= 2000"
                                },
                                "noteIsAccepted": {
                                    ".validate": "newData.isBoolean()"
                                },
                                "$other": {
                                    ".validate": false
                                }
                            }
                        },
                        "result": {
                            ".validate": "newData.hasChildren(['record', 'best', 'condition'])",
                            "record": {
                                ".validate": "newData.isNumber() && 0 <= newData.val() && newData.val() < 10000"
                            },
                            "best": {
                                ".validate": "newData.isNumber() && 0 <= newData.val() && newData.val() < root.child('events').child($event_id).child('attempts').val()"
                            },
                            "worst": {
                                ".validate": "newData.isNumber() && 0 <= newData.val() && newData.val() < root.child('events').child($event_id).child('attempts').val()"
                            },
                            "condition": {
                                ".validate": "newData.isString() && (newData.val() == 'OK' || newData.val() == 'DNF' || newData.val() == 'NOTYET')"
                            },
                            "$other": {
                                ".validate": false
                            }
                        },
                        "puzzle": {
                            ".validate": "newData.hasChildren(['type'])",
                            "type": {
                                ".validate": "newData.isString() && (newData.val() == 'database' || newData.val() == 'nodatabase' || newData.val() == 'unknown')"
                            },
                            "brand": {
                                ".validate": "newData.isNumber() && 0 < newData.val()"
                            },
                            "product": {
                                ".validate": "newData.isNumber() && 0 < newData.val()"
                            },
                            "input": {
                                ".validate": "newData.isString() && newData.val().length <= 50"
                            },
                            "$other": {
                                ".validate": false
                            }
                        },
                        // ビデオ
                        "videoUrl": {
                            ".validate": "newData.isString() && newData.val().length <= 1023"
                        },
                        "videoIsAccepted": {
                            ".validate": "newData.isBoolean()"
                        },
                        // 順位の優先度
                        "priority": {
                            ".validate": "newData.isString()"
                        },
                        // 順位
                        "place": {
                            ".validate": "newData.isNumber() && 0 < newData.val()"
                        },
                        // シーズンポイント (SP)
                        "seasonPoint": {
                            ".validate": "newData.isNumber() && 0 <= newData.val()"
                        },
                        // シーズンポイント (SP) ビデオボーナス
                        "seasonPointVideoBonus": {
                            ".validate": "newData.isNumber() && 0 <= newData.val()"
                        },
                        // ランダム抽選
                        "lottery": {
                            ".validate": "newData.isBoolean() && newData.parent().child('result').child('condition').val() == 'OK'"
                        },
                        "$other": {
                            ".validate": false
                        }
                    }
                }
            }
        },

        // Data for demo timer
        "resultsdemo": {
            ".read": false,
            ".write": false,
            "demo": {
                ".read": false,
                "$event_id": {
                    ".validate": "root.child('events').hasChild($event_id)",
                    "$user_id": {
                        ".read": "auth.uid === $user_id",
                        ".write": "auth.uid === $user_id",
                        ".validate": "root.child('users').hasChild($user_id) && newData.hasChildren(['beginAt'])",
                        "beginAt": {
                            ".validate": "newData.isNumber() && 0 <= newData.val()"
                        },
                        "details": {
                            "$details_seq": {
                                ".validate": "newData.hasChildren(['record', 'condition'])",
                                "record": {
                                    ".validate": "newData.isNumber() && 0 <= newData.val() && newData.val() < 10000"
                                },
                                "condition": {
                                    ".validate": "newData.isString() && (newData.val() == 'OK' || newData.val() == '+2' || newData.val() == 'DNF')"
                                },
                                "$other": {
                                    ".validate": false
                                }
                            }
                        },
                        "result": {
                            ".validate": "newData.hasChildren(['record', 'best', 'condition'])",
                            "record": {
                                ".validate": "newData.isNumber() && 0 <= newData.val() && newData.val() < 10000"
                            },
                            "best": {
                                ".validate": "newData.isNumber() && 0 <= newData.val() && newData.val() < root.child('events').child($event_id).child('attempts').val()"
                            },
                            "worst": {
                                ".validate": "newData.isNumber() && 0 <= newData.val() && newData.val() < root.child('events').child($event_id).child('attempts').val()"
                            },
                            "condition": {
                                ".validate": "newData.isString() && (newData.val() == 'OK' || newData.val() == 'DNF' || newData.val() == 'NOTYET')"
                            },
                            "$other": {
                                ".validate": false
                            }
                        },
                        "$other": {
                            ".validate": false
                        }
                    }
                }
            },
            "$other": {
                ".validate": false
            }
        },

        // Counted participants
        "participants": {
            ".read": false,
            ".write": false,
            "$contest_id": {
                ".read": "root.child('contests').child($contest_id).child('beginAt').val() <= now",
                ".validate": "root.child('contests').hasChild($contest_id)",
                "$event_id": {
                    ".validate": "root.child('events').hasChild($event_id)",
                    "count": {
                        ".validate": "newData.isNumber() && 0 <= newData.val()"
                    }
                }
            }
        },

        "$other": {
            ".validate": false
        }
    }
}
